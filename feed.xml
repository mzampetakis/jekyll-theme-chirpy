<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://mzampetakis.com/</id><title>Michalis Zampetakis</title><subtitle>This is Michalis Zampetakis's personal web page and blog.</subtitle> <updated>2021-07-03T18:24:27+03:00</updated> <author> <name>Michalis Zampetakis</name> <uri>https://mzampetakis.com/</uri> </author><link rel="self" type="application/atom+xml" href="https://mzampetakis.com/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="https://mzampetakis.com/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 Michalis Zampetakis </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Exec.Command</title><link href="https://mzampetakis.com/posts/Exec-Command/" rel="alternate" type="text/html" title="Exec.Command" /><published>2021-05-06T19:40:00+03:00</published> <updated>2021-07-01T22:16:00+03:00</updated> <id>https://mzampetakis.com/posts/Exec-Command/</id> <content src="https://mzampetakis.com/posts/Exec-Command/" /> <author> <name>Michalis Zampetakis</name> </author> <summary> One of the key features of Go is the considerably rich standard library. Go’s os package offers a wide range of methods and functions to allow programmers to exploit the host’s OS capabilities. Using it leaves us with almost no need to invoke system commands. However, we need sometimes to execute a custom bash script or a system command not supported by some library or just invoke a 3rd par... </summary> </entry> <entry><title>Deep Dive in Go Channels</title><link href="https://mzampetakis.com/posts/Deep-Dive-in-Go-Channels/" rel="alternate" type="text/html" title="Deep Dive in Go Channels" /><published>2020-10-31T07:55:00+02:00</published> <updated>2021-07-01T22:16:00+03:00</updated> <id>https://mzampetakis.com/posts/Deep-Dive-in-Go-Channels/</id> <content src="https://mzampetakis.com/posts/Deep-Dive-in-Go-Channels/" /> <author> <name>Michalis Zampetakis</name> </author> <summary> One of the biggest advantages of Go is undoubtedly it’s concurrency management. Goroutines are the main feature that Go uses to achieve this. Goroutines wouldn’t be so easy if there wasn’t for channels. A goroutine is a lightweight thread managed by the Go runtime. Channels are the pipes that connect concurrent goroutines. You can send values into channels from one goroutine and receive t... </summary> </entry> <entry><title>Testing When Time Matters</title><link href="https://mzampetakis.com/posts/Testing-When-Time-Matters/" rel="alternate" type="text/html" title="Testing When Time Matters" /><published>2020-09-26T20:55:00+03:00</published> <updated>2021-07-01T22:16:00+03:00</updated> <id>https://mzampetakis.com/posts/Testing-When-Time-Matters/</id> <content src="https://mzampetakis.com/posts/Testing-When-Time-Matters/" /> <author> <name>Michalis Zampetakis</name> </author> <summary> Software testing undeniably can provide objective, independent information about the quality of software. However, the testing development process can sometimes be not straightforward. There are cases - not so rare - that the development of a test requires a significant amount of effort and time. One of these cases is when we have to test code that is dependant on the current time. The issue ... </summary> </entry> <entry><title>AquaGo - A Toy Project</title><link href="https://mzampetakis.com/posts/AquaGo-A-Toy-Project/" rel="alternate" type="text/html" title="AquaGo - A Toy Project" /><published>2020-08-31T22:40:00+03:00</published> <updated>2021-07-01T22:16:00+03:00</updated> <id>https://mzampetakis.com/posts/AquaGo-A-Toy-Project/</id> <content src="https://mzampetakis.com/posts/AquaGo-A-Toy-Project/" /> <author> <name>Michalis Zampetakis</name> </author> <summary> Just imagine if you could have on your living’s room TV an aquarium! Wouldn’t that be nice, especially during the hot period of summertime? What about if you could add digital fishes and decorative stuff in this aquarium that you could create (physically or by design) with your own style? This is more or less what I got up with during this summer! A real toy project! Two beloved things he... </summary> </entry> <entry><title>Log Requests in Go</title><link href="https://mzampetakis.com/posts/Log-Requests-in-Go/" rel="alternate" type="text/html" title="Log Requests in Go" /><published>2020-08-17T23:40:00+03:00</published> <updated>2021-07-01T22:16:00+03:00</updated> <id>https://mzampetakis.com/posts/Log-Requests-in-Go/</id> <content src="https://mzampetakis.com/posts/Log-Requests-in-Go/" /> <author> <name>Michalis Zampetakis</name> </author> <summary> It’s a common sense that logging your HTTP request in your application is essential. The reasons for doing so are numerous. Error reporting, tracing, monitoring, performance tuning and so on. One of the easiest way to do this in Go is by using an HTTP middleware. Bellow we will show a simple but elegant way of doing it! What is a middleware When we build a web server it is common to use some... </summary> </entry> </feed>
